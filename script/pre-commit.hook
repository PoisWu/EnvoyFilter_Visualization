#!/usr/bin/env zsh

RETURN=0
BLACK=$(which black)
if [ $? -ne 0 ]; then
    echo "[!] black not installed. Unable to check source file format policy." >&2
    exit 1
fi

DIFF=$(which colordiff)
if [ $? -ne 0 ]; then
    DIFF=diff
fi

SHA1SUM=$(which sha1sum)
if [ $? -ne 0 ]; then
    SHA1SUM=shasum
fi

# FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.(c|cpp|h)$")
FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.(py)$")
for FILE in $FILES; do
    nf=$(git checkout-index --temp $FILE | cut -f 1)
    tempdir=$(mktemp -d) || exit 1
    newfile=$(mktemp ${tempdir}/${nf}.XXXXXX) || exit 1
    basename=$(basename $FILE)

    dupsource="${tempdir}/${basename}"
    mv $nf $dupsource
    $BLACK $dupsource 2>> /dev/null
    $DIFF -u -p -B --label="modified $FILE" --label="expected coding style" \
           "${FILE}" "${dupsource}"
    r=$?
    rm -rf "${tempdir}"
    if [ $r != 0 ] ; then
        echo "[!] $FILE does not follow the consistent coding style." >&2
        RETURN=1
    fi
    if [ $RETURN -eq 1 ]; then
        echo "" >&2
        echo "Make sure you indent as the following:" >&2
        echo "    black $FILE" >&2
        echo
    fi
done

if [ ! -z "${FILES[*]}" ]; then
    echo "Following files need to be cleaned up:"
    echo "${FILES[*]}"
fi

exit $RETURN
